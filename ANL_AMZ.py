"""
An√°lise de Desmatamento da Amaz√¥nia Legal
Projeto: Transforma√ß√£o Digital na Educa√ß√£o - Quest√£o 5
Ferramenta: Google Colab + Python + Matplotlib

: Este c√≥digo demonstra como usar Google Colab para an√°lise de dados
ambientais, focando no desmatamento da Amaz√¥nia Legal baseado nos dados da quest√£o 4.
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import warnings
warnings.filterwarnings('ignore')

def configurar_ambiente_colab():
    """
    : Primeiro, vou configurar o ambiente do Google Colab
    para garantir que todas as visualiza√ß√µes sejam exibidas corretamente
    e tenham qualidade profissional para nossa an√°lise.
    """
    print("üåê CONFIGURANDO AMBIENTE GOOGLE COLAB...")
    print("   ‚Üí Aplicando configura√ß√µes otimizadas para Colab")
    print("   ‚Üí Definindo estilo seaborn para gr√°ficos mais elegantes")
    print("   ‚Üí Configurando paleta de cores para dados ambientais")
    
    # Configura√ß√µes espec√≠ficas para Google Colab
    plt.style.use('seaborn-v0_8')
    plt.rcParams['figure.figsize'] = (14, 10)
    plt.rcParams['font.size'] = 11
    sns.set_palette("RdYlGn_r")  # Paleta vermelha-verde para dados ambientais
    
    print("‚úÖ Ambiente Colab configurado com sucesso!")

def carregar_dados_desmatamento():
    """
    : Agora vou carregar os dados de desmatamento da Amaz√¥nia
    que utilizei na quest√£o 4. Estes dados mostram a evolu√ß√£o do desmatamento
    e das pol√≠ticas de fiscaliza√ß√£o de 2020 a 2024.
    """
    print("\nüå≥ CARREGANDO DADOS DE DESMATAMENTO AMAZ√îNIA LEGAL...")
    print("   ‚Üí Dados temporais: 5 anos de monitoramento (2020-2024)")
    print("   ‚Üí M√©tricas: √Årea desmatada, multas aplicadas, valores arrecadados")
    print("   ‚Üí Fonte: TerraBrasilis/INPE e Portal Dados Abertos MMA")
    
    # : Dados baseados na minha an√°lise da quest√£o 4
    dados_temporais = {
        'Ano': [2020, 2021, 2022, 2023, 2024],
        'Area_Desmatada_km2': [10851, 11038, 11568, 9001, 6288],  # Redu√ß√£o de 45.6%
        'Multas_Aplicadas': [12500, 13200, 14800, 15847, 16200],  # Aumento de 29.6%
        'Valor_Multas_Bilhoes': [1.8, 1.9, 2.0, 2.1, 2.3],
        'Multas_Pagas_Percentual': [10, 11, 11.5, 12, 12]  # Apenas 12% s√£o pagas
    }
    
    # : Distribui√ß√£o por estados - Par√° lidera com 41%
    dados_estados = {
        'Estado': ['Par√°', 'Amazonas', 'Rond√¥nia', 'Acre', 'Mato Grosso'],
        'Percentual_Desmatamento': [41, 25, 18, 8, 8],
        'Area_km2_2024': [2578, 1572, 1132, 503, 503],
        'Multas_2024': [6642, 4050, 2916, 1296, 1296]
    }
    
    # : Convertendo para DataFrames para facilitar an√°lise
    df_temporal = pd.DataFrame(dados_temporais)
    df_estados = pd.DataFrame(dados_estados)
    
    print(f"‚úÖ Dados carregados: {len(df_temporal)} anos, {len(df_estados)} estados")
    print(f"   ‚Üí Per√≠odo cr√≠tico: {df_temporal['Ano'].min()} a {df_temporal['Ano'].max()}")
    print(f"   ‚Üí Redu√ß√£o total: {((11568-6288)/11568)*100:.1f}% no desmatamento")
    
    return df_temporal, df_estados

def criar_dashboard_ambiental(df_temporal, df_estados):
    """
    : Vou criar um dashboard ambiental completo com 6 visualiza√ß√µes
    que mostram a evolu√ß√£o do desmatamento, efic√°cia das pol√≠ticas de fiscaliza√ß√£o
    e distribui√ß√£o regional dos problemas ambientais.
    """
    print("\nüìä CRIANDO DASHBOARD AMBIENTAL INTERATIVO...")
    print("   ‚Üí Layout: 2x3 (6 gr√°ficos especializados)")
    print("   ‚Üí Foco: Impacto das pol√≠ticas de fiscaliza√ß√£o")
    print("   ‚Üí Objetivo: Demonstrar correla√ß√£o entre multas e redu√ß√£o")
    
    # : Criando figura com 6 subplots para an√°lise completa
    fig, axes = plt.subplots(2, 3, figsize=(20, 12))
    fig.suptitle('DASHBOARD AMBIENTAL - DESMATAMENTO AMAZ√îNIA LEGAL', 
                 fontsize=18, fontweight='bold', y=0.95)
    
    # GR√ÅFICO 1:  - Evolu√ß√£o do desmatamento com linha de tend√™ncia
    print("   üî• Criando gr√°fico de evolu√ß√£o do desmatamento...")
    axes[0,0].plot(df_temporal['Ano'], df_temporal['Area_Desmatada_km2'], 
                   marker='o', linewidth=4, markersize=10, color='red', label='√Årea Desmatada')
    
    # Adicionando linha de tend√™ncia para mostrar a redu√ß√£o
    z = np.polyfit(df_temporal['Ano'], df_temporal['Area_Desmatada_km2'], 1)
    p = np.poly1d(z)
    axes[0,0].plot(df_temporal['Ano'], p(df_temporal['Ano']), "--", alpha=0.8, color='darkred', label='Tend√™ncia')
    
    axes[0,0].set_title('Evolu√ß√£o do Desmatamento (km¬≤)', fontweight='bold', fontsize=12)
    axes[0,0].set_xlabel('Ano')
    axes[0,0].set_ylabel('√Årea Desmatada (km¬≤)')
    axes[0,0].grid(True, alpha=0.3)
    axes[0,0].legend()
    
    # GR√ÅFICO 2:  - Ranking de estados por desmatamento
    print("   üèÜ Criando ranking de estados...")
    colors_estados = ['#FF4444', '#FF6666', '#FF8888', '#FFAAAA', '#FFCCCC']
    bars = axes[0,1].bar(df_estados['Estado'], df_estados['Area_km2_2024'], 
                         color=colors_estados, alpha=0.8)
    axes[0,1].set_title('Desmatamento por Estado (2024)', fontweight='bold', fontsize=12)
    axes[0,1].set_xlabel('Estado')
    axes[0,1].set_ylabel('√Årea (km¬≤)')
    axes[0,1].tick_params(axis='x', rotation=45)
    
    # Adicionando valores nas barras
    for bar in bars:
        height = bar.get_height()
        axes[0,1].annotate(f'{height:,}',
                          xy=(bar.get_x() + bar.get_width() / 2, height),
                          xytext=(0, 3), textcoords="offset points",
                          ha='center', va='bottom', fontsize=9)
    
    # GR√ÅFICO 3:  - Distribui√ß√£o percentual por estado
    print("   ü•ß Criando distribui√ß√£o percentual...")
    axes[0,2].pie(df_estados['Percentual_Desmatamento'], labels=df_estados['Estado'], 
                  autopct='%1.1f%%', startangle=90, colors=colors_estados)
    axes[0,2].set_title('Distribui√ß√£o do Desmatamento (%)', fontweight='bold', fontsize=12)
    
    # GR√ÅFICO 4:  - Evolu√ß√£o das multas aplicadas
    print("   üí∞ Criando gr√°fico de multas...")
    axes[1,0].bar(df_temporal['Ano'], df_temporal['Multas_Aplicadas'], 
                  color='orange', alpha=0.7, label='Multas Aplicadas')
    axes[1,0].set_title('Multas Aplicadas por Ano', fontweight='bold', fontsize=12)
    axes[1,0].set_xlabel('Ano')
    axes[1,0].set_ylabel('N√∫mero de Multas')
    axes[1,0].legend()
    
    # GR√ÅFICO 5:  - Valor das multas vs efetividade
    print("   üìà Analisando efetividade das multas...")
    ax2 = axes[1,1].twinx()  # Segundo eixo Y
    
    line1 = axes[1,1].plot(df_temporal['Ano'], df_temporal['Valor_Multas_Bilhoes'], 
                          marker='s', linewidth=3, color='green', label='Valor (R$ Bi)')
    line2 = ax2.plot(df_temporal['Ano'], df_temporal['Multas_Pagas_Percentual'], 
                     marker='^', linewidth=3, color='blue', label='% Pagas')
    
    axes[1,1].set_title('Valor vs Efetividade das Multas', fontweight='bold', fontsize=12)
    axes[1,1].set_xlabel('Ano')
    axes[1,1].set_ylabel('Valor (R$ Bilh√µes)', color='green')
    ax2.set_ylabel('Percentual Pago (%)', color='blue')
    
    # Combinando legendas
    lines = line1 + line2
    labels = [l.get_label() for l in lines]
    axes[1,1].legend(lines, labels, loc='upper left')
    
    # GR√ÅFICO 6:  - Correla√ß√£o desmatamento vs multas
    print("   üîç Analisando correla√ß√£o desmatamento vs fiscaliza√ß√£o...")
    scatter = axes[1,2].scatter(df_temporal['Area_Desmatada_km2'], df_temporal['Multas_Aplicadas'], 
                               s=150, c=df_temporal['Ano'], cmap='viridis', alpha=0.7)
    
    # Linha de tend√™ncia para mostrar correla√ß√£o
    z = np.polyfit(df_temporal['Area_Desmatada_km2'], df_temporal['Multas_Aplicadas'], 1)
    p = np.poly1d(z)
    axes[1,2].plot(df_temporal['Area_Desmatada_km2'], p(df_temporal['Area_Desmatada_km2']), 
                   "r--", alpha=0.8, label='Tend√™ncia')
    
    axes[1,2].set_title('Desmatamento vs Multas', fontweight='bold', fontsize=12)
    axes[1,2].set_xlabel('√Årea Desmatada (km¬≤)')
    axes[1,2].set_ylabel('N√∫mero de Multas')
    axes[1,2].legend()
    
    # Colorbar para mostrar evolu√ß√£o temporal
    plt.colorbar(scatter, ax=axes[1,2], label='Ano')
    
    plt.tight_layout()
    plt.show()
    print("‚úÖ Dashboard ambiental criado com sucesso!")

def calcular_metricas_ambientais(df_temporal, df_estados):
    """
    : Agora vou calcular as m√©tricas ambientais principais
    que demonstram o impacto das pol√≠ticas de fiscaliza√ß√£o e orientam
    futuras decis√µes de gest√£o ambiental.
    """
    print("\nüìä CALCULANDO M√âTRICAS AMBIENTAIS...")
    print("   ‚Üí Analisando efic√°cia das pol√≠ticas de fiscaliza√ß√£o")
    print("   ‚Üí Calculando proje√ß√µes para 2025-2026")
    print("   ‚Üí Identificando correla√ß√µes entre vari√°veis")
    
    # : Calculando redu√ß√£o do desmatamento
    reducao_desmatamento = ((df_temporal['Area_Desmatada_km2'].iloc[2] - 
                            df_temporal['Area_Desmatada_km2'].iloc[-1]) / 
                           df_temporal['Area_Desmatada_km2'].iloc[2]) * 100
    
    # : Calculando aumento da fiscaliza√ß√£o
    aumento_multas = ((df_temporal['Multas_Aplicadas'].iloc[-1] - 
                      df_temporal['Multas_Aplicadas'].iloc[0]) / 
                     df_temporal['Multas_Aplicadas'].iloc[0]) * 100
    
    # : Calculando efetividade financeira
    valor_total_2024 = df_temporal['Valor_Multas_Bilhoes'].iloc[-1]
    valor_arrecadado = valor_total_2024 * 0.12  # 12% s√£o efetivamente pagas
    
    # : Proje√ß√£o otimista para 2025
    area_2024 = df_temporal['Area_Desmatada_km2'].iloc[-1]
    projecao_2025 = area_2024 * 0.7  # 30% de redu√ß√£o adicional
    
    # : Exibindo resultados de forma organizada
    print("\n" + "="*70)
    print("üåç RESULTADOS DAS AN√ÅLISES AMBIENTAIS")
    print("="*70)
    print(f"üìâ Redu√ß√£o do desmatamento (2022-2024): {reducao_desmatamento:.1f}%")
    print(f"üìà Aumento das multas (2020-2024): {aumento_multas:.1f}%")
    print(f"üèÜ Estado com maior desmatamento: {df_estados.loc[df_estados['Percentual_Desmatamento'].idxmax(), 'Estado']}")
    print(f"üí∞ Efetividade das multas: R$ {valor_arrecadado:.2f} bilh√µes arrecadados (12%)")
    print(f"üîÆ Proje√ß√£o 2025 (cen√°rio otimista): {projecao_2025:.0f} km¬≤")
    
    return {
        'reducao_desmatamento': reducao_desmatamento,
        'aumento_multas': aumento_multas,
        'valor_arrecadado': valor_arrecadado,
        'projecao_2025': projecao_2025
    }

def gerar_recomendacoes_ambientais(metricas):
    """
    : Para finalizar, vou apresentar recomenda√ß√µes baseadas
    em evid√™ncias cient√≠ficas para otimizar as pol√≠ticas ambientais
    e maximizar a prote√ß√£o da Amaz√¥nia Legal.
    """
    print("\n" + "="*70)
    print("üéØ RECOMENDA√á√ïES PARA POL√çTICAS AMBIENTAIS")
    print("="*70)
    
    print("BASEADO NAS AN√ÅLISES, RECOMENDO:")
    print(f"   üéØ PRIORIDADE ALTA:")
    print("   ‚Ä¢ üöÅ Intensificar fiscaliza√ß√£o no Par√° (41% do desmatamento)")
    print("   ‚Ä¢ üõ∞Ô∏è Implementar monitoramento por sat√©lite em tempo real")
    print("   ‚Ä¢ üí≥ Criar sistema de bloqueio de cr√©dito rural para infratores")
    
    print(f"\n   üìä PRIORIDADE M√âDIA:")
    print("   ‚Ä¢ ü§ñ Automatizar detec√ß√£o de desmatamento com IA")
    print("   ‚Ä¢ üèõÔ∏è Melhorar cobran√ßa das multas (apenas 12% s√£o pagas)")
    print("   ‚Ä¢ üå± Criar incentivos para preserva√ß√£o florestal")
    
    print(f"\n   üîÆ PROJE√á√ïES:")
    print(f"   ‚Ä¢ Se mantidas as pol√≠ticas atuais: {metricas['projecao_2025']:.0f} km¬≤ em 2025")
    print(f"   ‚Ä¢ Potencial de redu√ß√£o adicional: 30% com intensifica√ß√£o")
    print(f"   ‚Ä¢ Meta sugerida: Menos de 4.000 km¬≤ at√© 2026")

def main():
    """
    : Esta √© a fun√ß√£o principal que demonstra o uso do Google Colab
    para an√°lise de dados ambientais. Vou executar todas as etapas para mostrar
    um workflow completo de ci√™ncia de dados aplicada √† gest√£o ambiental.
    """
    print("üåê INICIANDO DEMONSTRA√á√ÉO NO GOOGLE COLAB")
    print("="*70)
    print("FERRAMENTA: Google Colab + Python + Matplotlib")
    print("PROJETO: Transforma√ß√£o Digital na Educa√ß√£o - Quest√£o 5")
    print("FOCO: An√°lise de Dados Ambientais - Desmatamento Amaz√¥nia")
    print("="*70)
    
    # : Executando workflow completo
    print("\nüîß ETAPA 1: CONFIGURA√á√ÉO DO AMBIENTE COLAB")
    configurar_ambiente_colab()
    
    print("\nüå≥ ETAPA 2: CARREGAMENTO DOS DADOS AMBIENTAIS")
    df_temporal, df_estados = carregar_dados_desmatamento()
    
    print("\nüìä ETAPA 3: CRIA√á√ÉO DO DASHBOARD AMBIENTAL")
    criar_dashboard_ambiental(df_temporal, df_estados)
    
    print("\nüìà ETAPA 4: C√ÅLCULO DAS M√âTRICAS AMBIENTAIS")
    metricas = calcular_metricas_ambientais(df_temporal, df_estados)
    
    print("\nüéØ ETAPA 5: GERA√á√ÉO DE RECOMENDA√á√ïES")
    gerar_recomendacoes_ambientais(metricas)
    
    print("\n" + "="*70)
    print("‚úÖ DEMONSTRA√á√ÉO GOOGLE COLAB CONCLU√çDA!")
    print("üìπ C√ìDIGO PRONTO PARA GRAVA√á√ÉO DO SEGUNDO V√çDEO")
    print("üéØ FERRAMENTA DEMONSTRADA: Google Colab + Python")
    print("="*70)

# : Executando o programa principal
if __name__ == "__main__":
    main()
