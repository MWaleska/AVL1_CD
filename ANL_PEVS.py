"""
An√°lise da Produ√ß√£o da Extra√ß√£o Vegetal e Silvicultura (PEVS)
Projeto: Transforma√ß√£o Digital na Educa√ß√£o - Quest√£o 5
Ferramenta: VSCode + Python + Matplotlib

Este script realiza an√°lise completa dos dados PEVS do IBGE,
gerando visualiza√ß√µes e insights para pol√≠ticas p√∫blicas de bioeconomia.
"""

import pandas as pd          # Manipula√ß√£o e an√°lise de dados estruturados
import matplotlib.pyplot as plt  # Cria√ß√£o de gr√°ficos e visualiza√ß√µes
import seaborn as sns        # Visualiza√ß√µes estat√≠sticas avan√ßadas
import numpy as np           # Opera√ß√µes matem√°ticas e arrays
import warnings              # Controle de avisos do sistema
warnings.filterwarnings('ignore')  # Suprime avisos desnecess√°rios

def configurar_graficos():
    """
    Configura o estilo visual dos gr√°ficos para apresenta√ß√£o profissional.
    
    Define:
    - Estilo padr√£o do matplotlib
    - Tamanho das figuras (12x8 polegadas)
    - Tamanho da fonte (10pt)
    - Paleta de cores harmoniosa
    """
    plt.style.use('default')                    # Estilo limpo e profissional
    plt.rcParams['figure.figsize'] = (12, 8)    # Tamanho otimizado para tela
    plt.rcParams['font.size'] = 10              # Fonte leg√≠vel
    sns.set_palette("husl")                     # Paleta de cores vibrantes
    print("‚úÖ Configura√ß√µes de gr√°ficos aplicadas")

def carregar_dados():
    """
    Carrega dados simulados baseados nos n√∫meros reais da quest√£o 1 da prova.
    
    Os dados incluem:
    - S√©rie temporal 2019-2024 de produ√ß√£o de a√ßa√≠, carv√£o vegetal e erva-mate
    - Distribui√ß√£o da produ√ß√£o por estados brasileiros
    - PIB agropecu√°rio regional para correla√ß√µes
    
    Returns:
        tuple: (df_temporal, df_estados) - DataFrames com dados organizados
    """
    print("üìä Carregando dados PEVS...")
    
    # Valores em toneladas, refletindo crescimento real do setor
    dados_acai = {
        'Ano': [2019, 2020, 2021, 2022, 2023, 2024],
        'Producao_Acai': [222706, 225430, 230150, 235890, 242100, 247461],  # Crescimento de 11.1%
        'Carvao_Vegetal': [372355, 385200, 398750, 420300, 465800, 502512], # Crescimento de 35.0%
        'Erva_Mate': [185000, 190000, 188000, 192000, 195000, 198000]       # Estabilidade com flutua√ß√µes
    }
    
    # Baseado na especializa√ß√£o regional por biomas
    dados_estados = {
        'Estado': ['Par√°', 'Amazonas', 'Acre', 'Rond√¥nia', 'Maranh√£o'],
        'Producao_Acai': [98500, 75200, 35600, 25800, 12361],              # Par√° lidera com 39.8%
        'Percentual': [39.8, 30.4, 14.4, 10.4, 5.0],                      # Distribui√ß√£o percentual
        'PIB_Agropecuario': [15.2, 8.5, 4.2, 6.8, 3.1]                    # PIB em bilh√µes para correla√ß√£o
    }
    
    df_temporal = pd.DataFrame(dados_acai)
    df_estados = pd.DataFrame(dados_estados)
    
    print(f"‚úÖ Dados carregados: {len(df_temporal)} anos, {len(df_estados)} estados")
    return df_temporal, df_estados

def criar_dashboard_principal(df_temporal, df_estados):
    """
    Cria dashboard principal com 4 visualiza√ß√µes complementares.
    
    Visualiza√ß√µes inclu√≠das:
    1. Evolu√ß√£o temporal do a√ßa√≠ (linha)
    2. Compara√ß√£o a√ßa√≠ vs carv√£o vegetal (barras agrupadas)
    3. Produ√ß√£o por estado (barras horizontais)
    4. Distribui√ß√£o percentual (pizza)
    
    Args:
        df_temporal (DataFrame): Dados de s√©rie temporal
        df_estados (DataFrame): Dados por estados
    """
    print("üé® Criando dashboard principal...")
    
    fig, axes = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle('DASHBOARD PEVS - PRODU√á√ÉO EXTRATIVISTA VEGETAL', 
                 fontsize=16, fontweight='bold', y=0.95)
    
    # Mostra tend√™ncia de crescimento sustent√°vel
    axes[0,0].plot(df_temporal['Ano'], df_temporal['Producao_Acai'], 
                   marker='o', linewidth=3, markersize=8, color='purple', label='A√ßa√≠')
    axes[0,0].set_title('Evolu√ß√£o da Produ√ß√£o de A√ßa√≠ (2019-2024)', fontweight='bold')
    axes[0,0].set_xlabel('Ano')
    axes[0,0].set_ylabel('Produ√ß√£o (toneladas)')
    axes[0,0].grid(True, alpha=0.3)  # Grid sutil para facilitar leitura
    axes[0,0].legend()
    
    for i, v in enumerate(df_temporal['Producao_Acai']):
        axes[0,0].annotate(f'{v:,}', (df_temporal['Ano'][i], v), 
                          textcoords="offset points", xytext=(0,10), ha='center', fontsize=8)
    
    # Barras agrupadas para comparar crescimento dos dois produtos
    x = np.arange(len(df_temporal['Ano']))
    width = 0.35  # Largura das barras
    
    bars1 = axes[0,1].bar(x - width/2, df_temporal['Producao_Acai']/1000, 
                         width, label='A√ßa√≠ (mil ton)', color='purple', alpha=0.7)
    bars2 = axes[0,1].bar(x + width/2, df_temporal['Carvao_Vegetal']/1000, 
                         width, label='Carv√£o Vegetal (mil ton)', color='orange', alpha=0.7)
    
    axes[0,1].set_title('Compara√ß√£o: A√ßa√≠ vs Carv√£o Vegetal', fontweight='bold')
    axes[0,1].set_xlabel('Ano')
    axes[0,1].set_ylabel('Produ√ß√£o (mil toneladas)')
    axes[0,1].set_xticks(x)
    axes[0,1].set_xticklabels(df_temporal['Ano'])
    axes[0,1].legend()
    axes[0,1].grid(True, alpha=0.3)
    
    # Facilita compara√ß√£o entre estados com nomes longos
    colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7']  # Cores distintas
    bars = axes[1,0].barh(df_estados['Estado'], df_estados['Producao_Acai'], color=colors)
    axes[1,0].set_title('Produ√ß√£o de A√ßa√≠ por Estado (2024)', fontweight='bold')
    axes[1,0].set_xlabel('Produ√ß√£o (toneladas)')
    
    for i, bar in enumerate(bars):
        width = bar.get_width()
        axes[1,0].annotate(f'{width:,}',
                          xy=(width, bar.get_y() + bar.get_height() / 2),
                          xytext=(3, 0),
                          textcoords="offset points",
                          ha='left', va='center', fontsize=9)
    
    # Visualiza√ß√£o clara da concentra√ß√£o regional
    axes[1,1].pie(df_estados['Producao_Acai'], labels=df_estados['Estado'], 
                  autopct='%1.1f%%', startangle=90, colors=colors)
    axes[1,1].set_title('Distribui√ß√£o da Produ√ß√£o por Estado', fontweight='bold')
    
    plt.tight_layout()  # Ajusta espa√ßamento automaticamente
    plt.show()
    print("‚úÖ Dashboard principal criado")

def analise_correlacao(df_temporal):
    """
    Realiza an√°lise de correla√ß√£o entre os produtos extrativistas.
    
    Calcula correla√ß√µes de Pearson entre:
    - Produ√ß√£o de a√ßa√≠
    - Produ√ß√£o de carv√£o vegetal  
    - Produ√ß√£o de erva-mate
    
    Args:
        df_temporal (DataFrame): Dados temporais dos produtos
        
    Returns:
        DataFrame: Matriz de correla√ß√£o
    """
    print("üîç Analisando correla√ß√µes...")
    
    # Renomear colunas para melhor apresenta√ß√£o
    dados_corr = df_temporal[['Producao_Acai', 'Carvao_Vegetal', 'Erva_Mate']].copy()
    dados_corr.columns = ['A√ßa√≠', 'Carv√£o Vegetal', 'Erva-Mate']
    
    plt.figure(figsize=(10, 8))
    correlacao = dados_corr.corr()  # Correla√ß√£o de Pearson
    
    sns.heatmap(correlacao, annot=True,           # Mostrar valores
                cmap='RdYlBu_r',                  # Paleta divergente
                center=0,                         # Centro em zero
                square=True,                      # C√©lulas quadradas
                fmt='.3f',                        # 3 casas decimais
                cbar_kws={"shrink": .8})          # Barra de cores menor
    
    plt.title('Matriz de Correla√ß√£o - Produtos Extrativistas', 
              fontsize=14, fontweight='bold', pad=20)
    plt.tight_layout()
    plt.show()
    
    print("‚úÖ An√°lise de correla√ß√£o conclu√≠da")
    return correlacao

def calcular_estatisticas(df_temporal, df_estados):
    """
    Calcula estat√≠sticas descritivas e indicadores de crescimento.
    
    M√©tricas calculadas:
    - Taxa de crescimento percentual (2019-2024)
    - Estado l√≠der em produ√ß√£o
    - Produ√ß√£o total nacional
    - M√©dia anual de produ√ß√£o
    
    Args:
        df_temporal (DataFrame): Dados temporais
        df_estados (DataFrame): Dados por estados
        
    Returns:
        dict: Dicion√°rio com estat√≠sticas calculadas
    """
    print("üìà Calculando estat√≠sticas...")
    
    # F√≥rmula: ((valor_final - valor_inicial) / valor_inicial) * 100
    crescimento_acai = ((df_temporal['Producao_Acai'].iloc[-1] - 
                        df_temporal['Producao_Acai'].iloc[0]) / 
                       df_temporal['Producao_Acai'].iloc[0]) * 100
    
    crescimento_carvao = ((df_temporal['Carvao_Vegetal'].iloc[-1] - 
                          df_temporal['Carvao_Vegetal'].iloc[0]) / 
                         df_temporal['Carvao_Vegetal'].iloc[0]) * 100
    
    estado_lider = df_estados.loc[df_estados['Producao_Acai'].idxmax(), 'Estado']
    producao_total = df_estados['Producao_Acai'].sum()
    
    print("\n" + "="*50)
    print("üìä AN√ÅLISES ESTAT√çSTICAS")
    print("="*50)
    print(f"Crescimento do A√ßa√≠ (2019-2024): {crescimento_acai:.1f}%")
    print(f"Crescimento do Carv√£o Vegetal (2019-2024): {crescimento_carvao:.1f}%")
    print(f"Estado l√≠der: {estado_lider}")
    print(f"Produ√ß√£o total 2024: {producao_total:,} toneladas")
    print(f"M√©dia anual a√ßa√≠: {df_temporal['Producao_Acai'].mean():,.0f} toneladas")
    
    return {
        'crescimento_acai': crescimento_acai,
        'crescimento_carvao': crescimento_carvao,
        'estado_lider': estado_lider,
        'producao_total': producao_total
    }

def gerar_insights(estatisticas):
    """
    Gera insights estrat√©gicos baseados nas an√°lises realizadas.
    
    Produz:
    - Insights principais sobre tend√™ncias
    - Recomenda√ß√µes para pol√≠ticas p√∫blicas
    - Alertas sobre sustentabilidade ambiental
    
    Args:
        estatisticas (dict): Dicion√°rio com estat√≠sticas calculadas
    """
    print("\n" + "="*50)
    print("üí° INSIGHTS PRINCIPAIS")
    print("="*50)
    
    insights = [
        f"1. A√ßa√≠ apresenta crescimento sustent√°vel de {estatisticas['crescimento_acai']:.1f}%",
        f"2. {estatisticas['estado_lider']} domina a produ√ß√£o nacional",
        f"3. Carv√£o vegetal cresceu {estatisticas['crescimento_carvao']:.1f}% - aten√ß√£o ambiental necess√°ria",
        "4. Diversifica√ß√£o regional indica potencial de bioeconomia",
        "5. Correla√ß√£o alta entre produtos sugere sinergia produtiva"
    ]
    
    for insight in insights:
        print(insight)
    
    print("\n" + "="*50)
    print("üéØ RECOMENDA√á√ïES ESTRAT√âGICAS")
    print("="*50)
    print("‚Ä¢ Investir em certifica√ß√£o sustent√°vel do a√ßa√≠")
    print("‚Ä¢ Monitorar impacto ambiental do carv√£o vegetal")
    print("‚Ä¢ Desenvolver cadeias produtivas regionais")
    print("‚Ä¢ Implementar tecnologias de rastreabilidade")
    print("‚Ä¢ Criar incentivos para pr√°ticas sustent√°veis")

def main():
    """
    Fun√ß√£o principal que orquestra toda a an√°lise.
    
    Fluxo de execu√ß√£o:
    1. Configurar ambiente gr√°fico
    2. Carregar dados simulados
    3. Criar visualiza√ß√µes principais
    4. Realizar an√°lise de correla√ß√£o
    5. Calcular estat√≠sticas descritivas
    6. Gerar insights e recomenda√ß√µes
    """
    print("üöÄ INICIANDO AN√ÅLISE PEVS")
    print("="*50)
    
    configurar_graficos()                                    # Configurar ambiente
    df_temporal, df_estados = carregar_dados()              # Carregar dados
    criar_dashboard_principal(df_temporal, df_estados)      # Criar visualiza√ß√µes
    correlacao = analise_correlacao(df_temporal)            # An√°lise de correla√ß√£o
    estatisticas = calcular_estatisticas(df_temporal, df_estados)  # Calcular estat√≠sticas
    gerar_insights(estatisticas)                            # Gerar insights
    
    print("\n‚úÖ AN√ÅLISE CONCLU√çDA COM SUCESSO!")
    print("üìπ Pronto para grava√ß√£o do v√≠deo da Quest√£o 5")

# Executa apenas quando o arquivo √© rodado diretamente
if __name__ == "__main__":
    main()
